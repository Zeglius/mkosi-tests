author: Zeglius
name: "Process and Upload System Extensions"
description: "Process raw system extension files and upload them to GitHub Container Registry"

inputs:
  raw-files:
    description: "List of raw files"
    required: true

  working-directory:
    description: "Working directory, preferably the mkosi.output directory"
    required: true

  basetree:
    description: "Absolute path to the mkosi.basetree directory"
    required: true

runs:
  using: "composite"
  steps:
    - name: setup-oras
      uses: oras-project/setup-oras@v1.2.1

    - name: Setup fd
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y fd-find
        sudo ln -s $(which fdfind) ~/.local/bin/fd

    - name: Process and upload extensions
      shell: bash
      env:
        BASETREE: ${{ inputs.basetree }}
        INPUT_FILES: ${{ inputs.raw-files }}
      working-directory: ${{ inputs.working-directory }}
      run: |
        set -xeuo pipefail

        echo "::group::Setup env vars"
        # Source environment variables
        ID=$(source ${BASETREE}/usr/lib/os-release; echo $ID)
        VERSION_ID=$(source ${BASETREE}/usr/lib/os-release; echo $VERSION_ID)
        OSTREE_VERSION=$(source ${BASETREE}/usr/lib/os-release; echo $OSTREE_VERSION)
        echo "::endgroup::"

        echo "::group::Check we have files passed as input"
        if [[ -z $INPUT_FILES ]]; then
          echo "No files passed as input"
          exit 1
        fi
        echo "::endgroup::"

        echo "::group::For each file passed as input, process it and upload to registry"
        for pattern in $INPUT_FILES
        do
          for file in $pattern; do
            # Check the fike exists
            if [[ ! -f $file ]]; then
              echo "File $file does not exist"
              exit 1
            fi

            # Check extension type
            is_sysext=$(sudo systemd-dissect --json=short "$file" | jq -r '.useSystemExtension == true')
            is_confext=$(sudo systemd-dissect --json=short "$file" | jq -r '.useConfigurationExtension == true')

            # Get base name without extension
            base_name=$(basename "$file" .raw)

            # Determine extension type for name
            if [[ "$base_name" != *"sysext"* ]] && [[ "$base_name" != *"confext"* ]]; then
              if [[ "$is_sysext" == "true" ]]; then
                base_name="${base_name}-sysext"
              elif [[ "$is_confext" == "true" ]]; then
                base_name="${base_name}-confext"
              fi
            fi

            # Create tar archive
            tar --zstd -cf "${base_name}.tar.zst" "$file"

            # Extract NAME from base_name (everything before the last underscore)
            NAME=$(echo "$base_name" | sed 's/\(.*\)_.*$/\1/')

            # Create reference name for registry
            REFERENCE_NAME="ghcr.io/${GITHUB_REPOSITORY_OWNER,,}/${NAME}:${ID}-${OSTREE_VERSION}"

            # Upload to registry
            oras push "$REFERENCE_NAME" "${base_name}.tar.zst"

            # Add additional tags
            oras tag "$REFERENCE_NAME" "${ID}-${VERSION_ID}"
            oras tag "$REFERENCE_NAME" "${ID}-${VERSION_ID}-latest"
          done
        done
        echo "::endgroup::"
